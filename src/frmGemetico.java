
import java.util.Vector;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmGemetico.java
 *
 * Created on 20-mar-2011, 13:52:30
 */
/**
 *
 * @author Wilfo
 */
public class frmGemetico extends javax.swing.JFrame {

    /** Creates new form frmGemetico */
    funcionFitness fit = new funcionFitness();
    Vector<Gen> gen1 = new Vector<Gen>();
    Cromosoma cromo = null;

    public frmGemetico() {
        initComponents();
        //meto A con sus consecuentes y tiempo
        PoblacionInicial();
        cromo = new Cromosoma(1, gen1);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAnalizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAnalizar.setText("Genetico");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addComponent(btnAnalizar))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(btnAnalizar))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        // TODO add your handling code here:
        //        //Este codigo prueba la funcion IsValidThis Alle
        //         Vector consew=new Vector();
        //        Vector tiempow=new Vector();
        //     consew.add(1);
        //     consew.add(7);
        //     tiempow.add(1);
        //     tiempow.add(2);
        //     Gen cls=new Gen(12,"Z",consew,tiempow,2);
        //        int val=fit.isValidThisAlle(cromo, cls, 0, 0, 0);
        //        System.out.println("Puedo o no : "+val);


        Cromosoma auxcromo = cromo;
       Vector<Gen> vecGenes=new Vector<Gen>();
        ////Retorna indices cuya sumatoria sea <=recurso dado funciona
        Vector indices = new Vector();


         System.out.println("-------------Cromosoma inicial---------------");

        for (int l = 0; l < cromo.gen.size(); l++) {
            System.out.println("Nodo: " + cromo.gen.elementAt(l).nodo + "   Tiempo: " + cromo.gen.elementAt(l).tiempo.size());
        }
        

//
//        indices = fit.getIndice(auxcromo, 0, 5);
//        System.out.println("-------------indices a eliminar---------------");
//        for (int k = 0; k < indices.size(); k++) {
//            System.out.println("Indice: " + indices.elementAt(k));
//        }

        System.out.println("-------------Son estos indices validos 1?---------------");

//        indices=fit.filterIndices(cromo, indices);
//        for (int k = 0; k < indices.size(); k++) {
//        System.out.println(" Ejecutados "+indices.elementAt(k));
//        }



      
        //debo crear un precromosoma y meter los genes que ya se han ejecutado
        //para averiguar si el gen nuevo se puede ejecutar debe debe mandarselo a buscar en
        //precromosoma para que duevla si o no en su ejecucion
//Ini
        int cont = 0;
       //  while (cont < auxcromo.gen.size()) {
        while (cont < auxcromo.gen.size()) {

           
            for (int k = 0; k < auxcromo.gen.elementAt(cont).tiempo.size(); k++) {
//suma verticalemente y encuentr aaquellos que sean <=5
                 System.out.println("------- "+auxcromo.gen.elementAt(cont).nodo+" ---Iteracion "+(k+1));
                indices = fit.getIndice(auxcromo, cont, 5);
                fit.printVector("posible indices a eliminar", indices);
            
//                Ahora verifico si hay o no indices ejecutados
                if (fit.cromofit.gen.size() >= 1) {
                    
//                si se encuentran genes(nodos) ejecutados se les pregunta si
//                el nuevo conjunto de genes pueden o no ejecutarse en el orden que estan
                   
                      fit.printVectorNodo("nodos del cromofit ", fit.cromofit);
                    indices=fit.filtrarIndiceporGen(auxcromo, fit.cromofit, indices);
                     fit.printVector("Despues (2-> por el si)indices a eliminar", indices);
                     
                //Ahora si procedo a eliminar los que se puedan realizar
                //Recuerda que los que se eliminan los almacenas en el cromosoma cromofit
                     //aqui debo preguntar si el vector.index(0) es igual al indez del gen que
                     //estoy ejecutando
                    int veriIndex=Integer.parseInt(indices.elementAt(0).toString());
                    
                    if(veriIndex==cont)
                     {System.out.println("(2 -> start ->1 porque si es mi primer indice del gen");
                        auxcromo=fit.nuevoCromosoma(auxcromo, indices,1);
                     }
                    else
                    {   System.out.println("(2 -> start ->0 nuevo cromosoma");
                        auxcromo=fit.nuevoCromosoma(auxcromo, indices,0);
                    }

//                    fit.printVectorNodo("nodos actuales ", auxcromo);
                }else{
//                si no hay genes ejecutados se encarga de que solo los que se ejecuten sean aquellos
//                que sean igual a cero;
      //FilterIndices -> filtra solo aquellos que sean iniciales
                    indices=fit.filterIndices(auxcromo, indices);
                     fit.printVector("Solo pueden eliminarse ", indices);
      //Ahora si procedo a eliminar los que se puedan realizar
      //Recuerda que los que se eliminan los almacenas en el cromosoma cromofit
                     
                    auxcromo=fit.nuevoCromosoma(auxcromo, indices,1);
//                    fit.printVectorNodo("nodos actuales ", auxcromo);
                }


            }
         //a√±ado el gen(tarea) que acaba de termina a los genes ejecutados
            fit.cromofit.gen.add(auxcromo.gen.elementAt(cont));
          //debemos remover de auxcromo el primer elemento cada vez que terminamos
            //para que no se lo tome en cuenta en la proxima decision
           
             fit.printVectorNodo("nodos ejecutados ", fit.cromofit);
              fit.printVectorNodo("nodos en auxcromo ", auxcromo);
//            vecGenes.add(auxcromo.gen.elementAt(0));
//           auxcromo.gen.removeElementAt(0);
//            fit.printVectorNodo("nodos en auxcromo despues", auxcromo);
          // System.out.println("fin del gen "+auxcromo.gen.elementAt(cont).nodo);
            cont++;
        }
//Fin

System.out.println("-------------TAREAS E TIEMPO DE ?---------------");

       System.out.println("Tiempo del cromosoma : "+auxcromo.gen.size());

    System.out.println("-------------Analisis del cromosoma---------------");
  fit.printVectorNodo("nodos actuales ", auxcromo);
  
//    for(int k=0;k<auxcromo.gen.size();k++)
//        System.out.println("Nodo: "+auxcromo.gen.elementAt(k).nodo +"Tiempo: "+auxcromo.gen.elementAt(k).tiempo);


//        Cromosoma cro = fit.nuevoCromosoma(cromo, indices);
//        for (int l = 0; l < cro.gen.size(); l++) {
//            System.out.println("Nodo: " + cro.gen.elementAt(l).nodo + "   Tiempo: " + cro.gen.elementAt(l).tiempo.size());
//        }
//        System.out.println("---");
//        System.out.println(" " + fit.cromofit.gen.elementAt(0).nodo);
    }//GEN-LAST:event_btnAnalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new frmGemetico().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    // End of variables declaration//GEN-END:variables

    public void PoblacionInicial() {

        Vector conse = new Vector();
        Vector tiempo = new Vector();
        conse.add(0);
        tiempo.add(1);
        tiempo.add(2);
        gen1.add(new Gen(1, "A", conse, tiempo, 2));

        Vector conse1 = new Vector();
        Vector tiempo1 = new Vector();
        conse1.add(0);
        tiempo1.add(1);
        gen1.add(new Gen(2, "B", conse1, tiempo1, 1));

        Vector conse2 = new Vector();
        Vector tiempo2 = new Vector();
        conse2.add(2);

        tiempo2.add(1);
        tiempo2.add(2);
        tiempo2.add(3);

        gen1.add(new Gen(3, "D", conse2, tiempo2, 3));

        Vector conse3 = new Vector();
        Vector tiempo3 = new Vector();
        conse3.add(1);
        conse3.add(2);

        tiempo3.add(1);
        tiempo3.add(2);
        tiempo3.add(3);
        tiempo3.add(4);
        tiempo3.add(5);

        gen1.add(new Gen(4, "C", conse3, tiempo3, 3));

        Vector conse4 = new Vector();
        Vector tiempo4 = new Vector();
        conse4.add(2);
        tiempo4.add(1);
        tiempo4.add(2);

        gen1.add(new Gen(5, "E", conse4, tiempo4, 2));

        Vector conse5 = new Vector();
        Vector tiempo5 = new Vector();

        conse5.add(3);
        conse5.add(5);

        tiempo5.add(1);
        tiempo5.add(2);
        tiempo5.add(3);

        gen1.add(new Gen(6, "F", conse5, tiempo5, 4));

        Vector conse6 = new Vector();
        Vector tiempo6 = new Vector();
        conse6.add(5);
        tiempo6.add(1);
        tiempo6.add(2);
        tiempo6.add(3);

        gen1.add(new Gen(7, "G", conse6, tiempo6, 1));

        Vector conse7 = new Vector();
        Vector tiempo7 = new Vector();
        conse7.add(2);
        tiempo7.add(1);
        tiempo7.add(2);

        gen1.add(new Gen(8, "H", conse7, tiempo7, 3));
    }
}
