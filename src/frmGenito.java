
import java.util.Vector;
import javax.swing.JFrame;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmGenito.java
 *
 * Created on 24-mar-2011, 21:56:11
 */
/**
 *
 * @author Wilfo
 */
public class frmGenito extends javax.swing.JFrame {

    /** Creates new form frmGenito */
    Poblacion objPo = new Poblacion();
    //Vector que almacena la población
    Vector savePo = new Vector();
    //Genero numeros al azar para podr obtener la población de cromosomas
    int[] rndVec = null;
    //Vector almacena la muestra en cadenas de texto para luego ser converidas
    //a cromosomas
    Vector strcro = new Vector();
    //Creo una lista de cromosoma a partir del vector strcro
    //la cual vendría a ser mi población inicial.
    Vector<Cromosoma> lstRptCromo = null;
    //creo un contador general para todos los cromosomas
    int cp = 0;
    //ResultadoCromo será una lista de detalles de las respuestas de los cromosomas
    Vector<ResultadoCromo> VecReCromoDetalle = new Vector<ResultadoCromo>();

    Vector tempo=new Vector();

    //meto los obejtos por sus indices en el sgt vector
    Vector bindex=new Vector();

    //almaceno tareas ejecutadas internas
//    Vector<MiSubTareas> VecclsTarea=new Vector<MiSubTareas>();
 
    public frmGenito() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnPoblación = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnMuestra = new javax.swing.JButton();
        btnIniciar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        cmbOpc = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        btnEjecutar = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        btnCromosoma = new javax.swing.JButton();
        txtIndice = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Opciones del Algoritmo Genético"));
        jPanel1.setLayout(null);

        btnPoblación.setText("Generar Población");
        btnPoblación.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPoblaciónActionPerformed(evt);
            }
        });
        jPanel1.add(btnPoblación);
        btnPoblación.setBounds(20, 90, 150, 23);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 48));
        jLabel5.setText("3");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(464, 30, 50, 60);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 48));
        jLabel6.setText("1");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(60, 30, 50, 60);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 48));
        jLabel7.setText("2");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(270, 30, 40, 60);

        btnMuestra.setText("Tomar Muestra(20)");
        btnMuestra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMuestraActionPerformed(evt);
            }
        });
        jPanel1.add(btnMuestra);
        btnMuestra.setBounds(220, 90, 150, 23);

        btnIniciar.setText("Iniciar Algoritmo");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });
        jPanel1.add(btnIniciar);
        btnIniciar.setBounds(420, 90, 160, 23);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18));
        jLabel1.setText("ALGORITMO GENÉTICO VERSIÓN BETA 1.0");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel2.setText("Autor: Wilfredo Martel S.");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText("INVESTIGACIÓN DE OPERACIONES II");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel4.setText("Profesor: Mat. Johni Bustamante ");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Análisis de respuesta del Algoritmo"));
        jPanel2.setLayout(null);

        cmbOpc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Análisis de Gráfica (O VS R)" }));
        jPanel2.add(cmbOpc);
        cmbOpc.setBounds(10, 50, 250, 20);

        jLabel8.setText("Opciones de Cromosomas");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(10, 24, 220, 20);

        btnEjecutar.setText("Ejecutar");
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });
        jPanel2.add(btnEjecutar);
        btnEjecutar.setBounds(10, 80, 130, 23);

        jLabel9.setText("Análisis detallado Individual por cromosoma");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(340, 30, 250, 14);

        btnCromosoma.setText("Ver Cromosoma");
        btnCromosoma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCromosomaActionPerformed(evt);
            }
        });
        jPanel2.add(btnCromosoma);
        btnCromosoma.setBounds(340, 80, 150, 23);
        jPanel2.add(txtIndice);
        txtIndice.setBounds(460, 50, 90, 20);

        jLabel10.setText("Escriba el Indice :");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(330, 50, 120, 14);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel3)
                .addGap(6, 6, 6)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel4)
                .addGap(15, 15, 15)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPoblaciónActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPoblaciónActionPerformed
        // TODO add your handling code here:
        savePo = objPo.getAllPoblacion();
        objPo.PrintPoblacion("Secuencia", savePo);
    }//GEN-LAST:event_btnPoblaciónActionPerformed

    private void btnMuestraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMuestraActionPerformed
        // TODO add your handling code here:
        rndVec = objPo.generar();
        strcro = objPo.getMuestra(rndVec, savePo);
        lstRptCromo = objPo.getAllCromosomaMuestra(strcro);
//        objPo.PrintPoblacion("Muestras",strcro);
        for (int p = 0; p < lstRptCromo.size(); p++) {
            objPo.PrintCromo("Cromosoma ", lstRptCromo.elementAt(p));
            System.out.println("---------------------------------------");
        }
    }//GEN-LAST:event_btnMuestraActionPerformed

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        // TODO add your handling code here:

        while (cp < lstRptCromo.size()) {
            System.out.println("*****************Cromosoma " + (cp + 1) + "************************");
            generaciones(cp, lstRptCromo.elementAt(cp));
            cp++;
        }

    }//GEN-LAST:event_btnIniciarActionPerformed

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed
        // TODO add your handling code here:
        int ind = cmbOpc.getSelectedIndex();
        switch (ind) {
            
            case 0:
                Vector<Cromosoma> ver = objPo.getAllCromito(VecReCromoDetalle);
                //tiempos 
               tempo = objPo.GetAllTime(ver);
                PanelDibujo panel = new PanelDibujo(tempo);
                JFrame aplicacion = new JFrame();
                aplicacion.add(panel); // agrega el panel al marco
                aplicacion.setSize(750, 250); // establece el tamaño del marco
                aplicacion.setVisible(true); //hace que el marco sea visible
                break;
        }
    }//GEN-LAST:event_btnEjecutarActionPerformed

    private void btnCromosomaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCromosomaActionPerformed
        // TODO add your handling code here:
        int val=Integer.parseInt(txtIndice.getText());
        int tk=Integer.parseInt(tempo.elementAt(val).toString());
       objPo.printDetalleCromosoma(VecReCromoDetalle.elementAt(val).cromorpta, VecReCromoDetalle.elementAt(val).cromoeje,tk);
       tiempo objTiempo=new tiempo();
       //envio el cromosoma en lapos seleccionado
       objTiempo.cromo=VecReCromoDetalle.elementAt(val).cromorpta;
       objTiempo.croDetalle=VecReCromoDetalle.elementAt(val).cromoeje;
       objTiempo.VecclsTarea2=(Vector<MiSubTareas>)bindex.elementAt(val);
       objTiempo.show();
       //ahora pasamos el tiempo de los nodos ejecutados cromofit
       //ahora los nodos del auxcromo
    }//GEN-LAST:event_btnCromosomaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new frmGenito().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCromosoma;
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JButton btnMuestra;
    private javax.swing.JButton btnPoblación;
    private javax.swing.JComboBox cmbOpc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txtIndice;
    // End of variables declaration//GEN-END:variables

    public void generaciones(int FID, Cromosoma croEnvia) {

        try {
            //tareas internas de cada vector
            Vector<MiSubTareas> VecclsTarea=new Vector<MiSubTareas>();
            funcionFitness fit = new funcionFitness();
            Vector<Gen> gen1 = new Vector<Gen>();
            //Envio el cromosoma a analizar
            Cromosoma cromo = croEnvia;

            //empieza la acción

            Cromosoma auxcromo = cromo;
            Vector<Gen> vecGenes = new Vector<Gen>();
            ////Retorna indices cuya sumatoria sea <=recurso dado funciona
            Vector indices = new Vector();


            System.out.println("-------------Cromosoma inicial---------------");

            for (int l = 0; l < cromo.gen.size(); l++) {
                System.out.println("Nodo: " + cromo.gen.elementAt(l).nodo + "   Tiempo: " + cromo.gen.elementAt(l).tiempo.size());
            }


//
//        indices = fit.getIndice(auxcromo, 0, 5);
//        System.out.println("-------------indices a eliminar---------------");
//        for (int k = 0; k < indices.size(); k++) {
//            System.out.println("Indice: " + indices.elementAt(k));
//        }

            System.out.println("-------------Son estos indices validos 1?---------------");

//        indices=fit.filterIndices(cromo, indices);
//        for (int k = 0; k < indices.size(); k++) {
//        System.out.println(" Ejecutados "+indices.elementAt(k));
//        }




            //debo crear un precromosoma y meter los genes que ya se han ejecutado
            //para averiguar si el gen nuevo se puede ejecutar debe debe mandarselo a buscar en
            //precromosoma para que duevla si o no en su ejecucion
//Ini
            int cont = 0;
            //  while (cont < auxcromo.gen.size()) {
            while (cont < auxcromo.gen.size()) {

                 Vector roTarea=new Vector();
                for (int k = 0; k < auxcromo.gen.elementAt(cont).tiempo.size(); k++) {
//suma verticalemente y encuentr aaquellos que sean <=5
                    System.out.println("------- " + auxcromo.gen.elementAt(cont).nodo + " ---Iteracion " + (k + 1));
                    indices = fit.getIndice(auxcromo, cont, 5);
                    fit.printVector("posible indices a eliminar", indices);

//                Ahora verifico si hay o no indices ejecutados
                    if (fit.cromofit.gen.size() >= 1) {

//                si se encuentran genes(nodos) ejecutados se les pregunta si
//                el nuevo conjunto de genes pueden o no ejecutarse en el orden que estan

                        fit.printVectorNodo("nodos del cromofit ", fit.cromofit);
                        indices = fit.filtrarIndiceporGen(auxcromo, fit.cromofit, indices);
                        fit.printVector("Despues (2-> por el si)indices a eliminar", indices);

                        //Ahora si procedo a eliminar los que se puedan realizar
                        //Recuerda que los que se eliminan los almacenas en el cromosoma cromofit
                        //aqui debo preguntar si el vector.index(0) es igual al indez del gen que
                        //estoy ejecutando
                        int veriIndex = Integer.parseInt(indices.elementAt(0).toString());

                        if (veriIndex == cont) {
                            System.out.println("(2 -> start ->1 porque si es mi primer indice del gen");
                            auxcromo = fit.nuevoCromosoma(auxcromo, indices, 1);
                        } else {
                            System.out.println("(2 -> start ->0 nuevo cromosoma");
                            auxcromo = fit.nuevoCromosoma(auxcromo, indices, 0);
                        }

//                    fit.printVectorNodo("nodos actuales ", auxcromo);
                    } else {
//                si no hay genes ejecutados se encarga de que solo los que se ejecuten sean aquellos
//                que sean igual a cero;
                        //FilterIndices -> filtra solo aquellos que sean iniciales
                        indices = fit.filterIndices(auxcromo, indices);
                        fit.printVector("Solo pueden eliminarse ", indices);
                        //Ahora si procedo a eliminar los que se puedan realizar
                        //Recuerda que los que se eliminan los almacenas en el cromosoma cromofit

                        auxcromo = fit.nuevoCromosoma(auxcromo, indices, 1);
//                    fit.printVectorNodo("nodos actuales ", auxcromo);
                    }

                    //por cada ciclo de la subtarea meto en el vector roTar
                    roTarea.add(fit.auxC);
                    //vacio auxC
                    fit.auxC="";
                }
                //agrego la tarea con sus n elementos ejecutados verticalmente dentro d ellas
//                 if(cp<=0){
                MiSubTareas clTar=new MiSubTareas(roTarea);
                //ejemplo A se ejecuto con [b,g],[c,g,f]
                 VecclsTarea.add(clTar);
                
                 //}
                 
                 
                 //elimino todos los indices de roTarea para volver a producir el mismo ciclo
                 //en teoria por cada nodo en ejecucion tendra sus subindices ejecutados
                
                //añado el gen(tarea) que acaba de termina a los genes ejecutados
                fit.cromofit.gen.add(auxcromo.gen.elementAt(cont));
                //debemos remover de auxcromo el primer elemento cada vez que terminamos
                //para que no se lo tome en cuenta en la proxima decision

                fit.printVectorNodo("nodos ejecutados ", fit.cromofit);
                fit.printVectorNodo("nodos en auxcromo ", auxcromo);
//            vecGenes.add(auxcromo.gen.elementAt(0));
//           auxcromo.gen.removeElementAt(0);
//            fit.printVectorNodo("nodos en auxcromo despues", auxcromo);
                // System.out.println("fin del gen "+auxcromo.gen.elementAt(cont).nodo);
                cont++;
            }
//Fin
            //aqui añado las subtareas al vector
            bindex.add(VecclsTarea);
            VecReCromoDetalle.add(new ResultadoCromo(FID, auxcromo, fit.cromofit));
            System.out.println("-------------TAREAS E TIEMPO DE ?---------------");

            System.out.println("Tiempo del cromosoma : " + auxcromo.gen.size());

            System.out.println("-------------Analisis del cromosoma---------------");
            fit.printVectorNodo("nodos actuales ", auxcromo);

        } catch (Exception e) {
        }

    }
}
